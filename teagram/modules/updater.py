import os
import sys
import time
import atexit
import logging

from pyrogram import Client, types
from subprocess import check_output
from .. import loader, utils, validators
from ..types import Config, ConfigValue
from loguru import logger

from aiogram import Bot
from aiogram.utils.exceptions import CantParseEntities, CantInitiateConversation, BotBlocked

@loader.module(name="Updater", author='teagram')
class UpdateMod(loader.Module):
    """üçµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –≥–∏—Ç–∞ teagram"""
    def __init__(self):
        value = self.db.get('Updater', 'sendOnUpdate')
        
        if value is None:
            value = True

        self.config = Config(
            ConfigValue(
                option='sendOnUpdate',
                default=True,
                value=value,
                validator=validators.Boolean()
            ) # type: ignore
        )

    async def on_load(self, app: Client):
        if not self.config.get('sendOnUpdate'):
            return

        bot: Bot = self.bot.bot
        me = await app.get_me()
        _me = await bot.get_me()

        last = None

        try:
            last = check_output('git log -1', shell=True).decode().split()[1].strip()
            diff = check_output('git rev-parse HEAD', shell=True).decode().strip()

            if diff:
                await bot.send_message(
                    me.id,
                    f"‚úî –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (<a href='https://github.com/HotDrify/teagram/commit/{last}'>{last[:6]}...</a>)"
                )
                
        except CantInitiateConversation:
            logger.error(f'Updater | –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ ({_me.username})')
        except BotBlocked:
            logger.error(f'Updater | –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start ({_me.username})')

        except CantParseEntities:
            await bot.send_message(
                me.id,
                f"‚úî –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (https://github.com/HotDrify/teagram/commit/{last})"
            )
        except Exception as error:
            await bot.send_message(
                me.id,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n'
                f'‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ GIT {error}'
            )

    async def update_cmd(self, app: Client, message: types.Message):
        try:
            await utils.answer(message, '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...')

            check_output('git stash', shell=True).decode()
            output = check_output('git pull', shell=True).decode()
            
            if 'Already up to date.' in output:
                return await utils.answer(message, '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è ‚úî')
            
            def restart() -> None:
                os.execl(sys.executable, sys.executable, "-m", "teagram")

            atexit.register(restart)
            self.db.set(
                "teagram.loader", "restart", {
                    "msg": f"{message.chat.id}:{message.id}",
                    "start": str(round(time.time())),
                    "type": "update"
                }
            )

            await utils.answer(message, "üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

            logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            return sys.exit(0)
        except Exception as error:
            await utils.answer(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}')
